{"version":3,"sources":["atoms.tsx","components/CreatedList.tsx","components/CreateToDo.tsx","components/AddCategory.tsx","components/ToDoContainer.tsx","theme.ts","App.tsx","index.tsx"],"names":["theme","atom","key","default","everyCategories","localStorage","getItem","JSON","parse","categoryNow","toDoState","toDoSelector","selector","get","toDos","category","filter","item","List","styled","li","CreatedList","text","id","useRecoilState","setToDos","allCats","useRecoilValue","map","index","onClick","clickedCategory","targetIndex","findIndex","newToDo","slice","Title","h1","Form","form","ErrorMeg","h3","InputBox","div","Input","input","props","bgColor","AddBtn","button","CreateToDo","selectedCategory","useForm","register","handleSubmit","formState","setValue","useEffect","setItem","stringify","onSubmit","toDo","oldToDos","Date","now","errors","message","required","autoFocus","autoComplete","type","placeholder","Container","Box","section","Overlay","AddCategory","setShowAddCat","setAllCats","setCategory","useSetRecoilState","console","log","addCat","className","Lists","ul","SelectBox","AddCat","ToDoApp","useState","showAddCat","value","onInput","event","currentTarget","lightTheme","textColor","accentColor","darkTheme","GlobalStyle","createGlobalStyle","App","isDark","ReactDOM","render","StrictMode","Helmet","rel","href","document","getElementById"],"mappings":"uKAEaA,EAAQC,YAAK,CACxBC,IAAK,SACLC,SAAS,IAGEC,EAAkBH,YAAK,CAClCC,IAAK,kBACLC,QAASE,aAAaC,QAAQ,cAC1BC,KAAKC,MAAMH,aAAaC,QAAQ,eAChC,CAAC,YAAa,QAAS,UAShBG,EAAcR,YAAa,CACtCC,IAAK,cACLC,QAASE,aAAaC,QAAQ,eAC1BC,KAAKC,MAAMH,aAAaC,QAAQ,gBAChC,cAGOI,EAAYT,YAAc,CACrCC,IAAK,OACLC,QAASE,aAAaC,QAAQ,SAC1BC,KAAKC,MAAMH,aAAaC,QAAQ,UAChC,KAGOK,EAAeC,YAAS,CACnCV,IAAK,eACLW,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAAQD,EAAIH,GACZK,EAAWF,EAAIJ,GACrB,OAAOK,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKF,WAAaA,Q,4BCnC9CG,EAAOC,IAAOC,GAAV,6XAkDKC,I,YAAAA,EA7Bf,YAAqD,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,GAAIR,EAAmB,EAAnBA,SAC/B,EAA0BS,YAAed,GAAzC,mBAAOI,EAAP,KAAcW,EAAd,KACMC,EAAUC,YAAevB,GAY/B,OACE,eAACc,EAAD,WACE,+BAAOI,IACNI,EAAQE,KACP,SAACX,EAAcY,GAAf,OACEd,IAAaE,GACX,wBAAoBa,QAAS,kBAhBvB,SAACC,GACf,IAAMC,EAAclB,EAAMmB,WAAU,SAAChB,GAAD,OAAUA,EAAKM,KAAOA,KACpDW,EAAiB,CAAEZ,OAAMC,KAAIR,SAAUgB,GAC7CN,GAAS,uCACJX,EAAMqB,MAAM,EAAGH,IADX,CAEPE,GAFO,YAGJpB,EAAMqB,MAAMH,EAAc,QAUYF,CAAQb,IAA3C,SACGA,GADUY,U,QCpCnBO,EAAQjB,IAAOkB,GAAV,gHAMLC,EAAOnB,IAAOoB,KAAV,6FAKJC,EAAWrB,IAAOsB,GAAV,iIAORC,EAAWvB,IAAOwB,IAAV,8IAORC,EAAQzB,IAAO0B,MAAV,0UAQW,SAACC,GAAD,OAAWA,EAAM9C,MAAM+C,WAWvCC,EAAS7B,IAAO8B,OAAV,4NA8CGC,I,QAAAA,EAlCf,WAAuB,IAAD,EACpB,EAA0B1B,YAAed,GAAzC,mBAAOI,EAAP,KAAcW,EAAd,KACM0B,EAAmBxB,YAAelB,GACxC,EAAwD2C,cAAhDC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,UAAWC,EAA3C,EAA2CA,SAW3C,OAHAC,qBAAU,WACRpD,aAAaqD,QAAQ,QAASnD,KAAKoD,UAAU7C,MAC5C,CAACA,IAEF,qCACE,cAACsB,EAAD,8BACA,eAACE,EAAD,CAAMsB,SAAUN,GAbJ,SAAC,GAAqB,IAAnBO,EAAkB,EAAlBA,KACjBpC,GAAS,SAACqC,GAAD,OACP,CAAExC,KAAMuC,EAAMtC,GAAIwC,KAAKC,MAAOjD,SAAUoC,IADjC,mBAEJW,OAELN,EAAS,OAAQ,OAQf,UACE,cAAChB,EAAD,oBAAWe,EAAUU,OAAOJ,YAA5B,aAAW,EAAuBK,UAClC,eAACxB,EAAD,WACE,cAACE,EAAD,2BACMS,EAAS,OAAQ,CAAEc,SAAU,8DADnC,IAEEC,WAAS,EACTC,aAAa,MACbC,KAAK,OACLC,YAAY,oBAEd,cAACvB,EAAD,4B,QCvFJwB,EAAYrD,IAAOwB,IAAV,0OAaT8B,EAAMtD,IAAOuD,QAAV,6cAwBHpC,EAAOnB,IAAOoB,KAAV,oXAoBJoC,EAAUxD,IAAOwB,IAAV,iFAuDEiC,I,QAAAA,EAzCf,YAAuD,IAAhCC,EAA+B,EAA/BA,cACrB,EAAmCzB,cAA3BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAClB,EAA8B9B,YAAepB,GAA7C,mBAAOsB,EAAP,KAAgBoD,EAAhB,KACMC,EAAcC,YAAkBvE,GAStC,OADAwE,QAAQC,IAAIxD,GAEV,eAAC8C,EAAD,WACE,eAACC,EAAD,WACE,qDACA,eAAC,EAAD,CAAMb,SAAUN,GAZN,SAAC,GAAuB,IAArB6B,EAAoB,EAApBA,OACjBN,GAAc,GACdC,GAAW,uCAAUpD,GAAV,CAAmByD,OAC9B9E,aAAaqD,QAAQ,aAAcnD,KAAKoD,UAAL,sBAAmBjC,GAAnB,CAA4ByD,MAC/DJ,EAAYI,GACZ9E,aAAaqD,QAAQ,cAAenD,KAAKoD,UAAUwB,OAO/C,UACE,iDACM9B,EAAS,SAAU,CACrBc,SAAU,mGAFd,IAIEI,YAAY,wBACZH,WAAS,EACTC,aAAa,MACbC,KAAK,UAEP,wBAAQA,KAAK,SAAb,oBAEF,wBACEA,KAAK,SACLc,UAAU,YACVtD,QAAS,kBAAM+C,GAAc,IAH/B,sBAQF,cAACF,EAAD,QCvGAH,EAAYrD,IAAOuD,QAAV,8IAQTW,EAAQlE,IAAOmE,GAAV,wKAWLC,EAAYpE,IAAOwB,IAAV,wUAmBT6C,EAASrE,IAAOwB,IAAV,uTAyDG8C,I,GAAAA,GAzCf,WACE,IAAM3E,EAAQa,YAAehB,GAC7B,EAAgCa,YAAef,GAA/C,mBAAOM,EAAP,KAAiBgE,EAAjB,KACMrD,EAAUC,YAAevB,GAC/B,EAAoCsF,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBd,EAAnB,KASA,OACE,qCACGc,EAAa,cAAC,EAAD,CAAad,cAAeA,IAAoB,KAC9D,eAAC,EAAD,WACE,cAAC,EAAD,IACA,eAACQ,EAAD,WACE,eAACE,EAAD,WACE,wBAAQK,MAAO7E,EAAU8E,QAdnB,SAACC,GACff,EAAYe,EAAMC,cAAcH,OAChCvF,aAAaqD,QACX,cACAnD,KAAKoD,UAAUmC,EAAMC,cAAcH,SAU7B,SACGlE,EAAQE,KAAI,SAACX,EAAcY,GAAf,OACX,wBAAoB+D,MAAO3E,EAA3B,SACGA,GADUY,QAKjB,cAAC,IAAD,CAAauD,UAAU,wBAEzB,cAACI,EAAD,CAAQ1D,QAAS,kBAAM+C,GAAc,IAArC,iCAGC/D,EAAMc,KAAI,SAACX,GAAD,OACT,cAAC,EAAD,eAA+BA,GAAbA,EAAKM,iBC9FtByE,GAA0B,CACnCjD,QAAS,UACTkD,UAAW,UACXC,YAAa,WAGJC,GAAyB,CAClCpD,QAAS,UACTkD,UAAW,UACXC,YAAa,WCLXE,GAAcC,YAAH,mtCA2BK,SAACvD,GAAD,OAAWA,EAAM9C,MAAM+C,WAwC9BuD,OAZf,WACE,IAAMC,EAAS5E,YAAe3B,GAC9B,OACE,mCACE,eAAC,IAAD,CAAeA,MAAOuG,EAASJ,GAAYH,GAA3C,UACE,cAACI,GAAD,IACA,cAAC,GAAD,U,SC7DRI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,WACE,eAACC,GAAA,EAAD,WACE,sBAAMC,IAAI,aAAaC,KAAK,iCAC5B,sBAAMD,IAAI,aAAaC,KAAK,8BAC5B,sBACEA,KAAK,kGACLD,IAAI,eAEN,sBACEA,IAAI,aACJC,KAAK,gEAGT,cAAC,GAAD,SAGJC,SAASC,eAAe,W","file":"static/js/main.a60af2b7.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport const theme = atom({\n  key: \"isDark\",\n  default: false,\n});\n\nexport const everyCategories = atom({\n  key: \"everyCategories\",\n  default: localStorage.getItem(\"categories\")\n    ? JSON.parse(localStorage.getItem(\"categories\") as any)\n    : [\"SCHEDULED\", \"DOING\", \"DONE\"],\n});\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: string;\n}\n\nexport const categoryNow = atom<string>({\n  key: \"categoryNow\",\n  default: localStorage.getItem(\"categoryNow\")\n    ? JSON.parse(localStorage.getItem(\"categoryNow\") as any)\n    : \"SCHEDULED\",\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: localStorage.getItem(\"toDos\")\n    ? JSON.parse(localStorage.getItem(\"toDos\") as any)\n    : [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryNow);\n    return toDos.filter((item) => item.category === category);\n  },\n});\n","import { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { everyCategories, IToDo, toDoState } from \"../atoms\";\n\nconst List = styled.li`\n  background-color: #fff;\n  border: solid 1px #ccc;\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n  border-radius: 12px;\n  gap: 8px;\n  span {\n    margin-right: auto;\n  }\n  button {\n    border-radius: 12px;\n    border: none;\n    cursor: pointer;\n    background-color: dodgerblue;\n    color: #fff;\n    padding: 12px;\n  }\n`;\n\nfunction CreatedList({ text, id, category }: IToDo) {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const allCats = useRecoilValue(everyCategories);\n\n  const onClick = (clickedCategory: string) => {\n    const targetIndex = toDos.findIndex((item) => item.id === id);\n    const newToDo: IToDo = { text, id, category: clickedCategory };\n    setToDos(() => [\n      ...toDos.slice(0, targetIndex),\n      newToDo,\n      ...toDos.slice(targetIndex + 1),\n    ]);\n  };\n\n  return (\n    <List>\n      <span>{text}</span>\n      {allCats.map(\n        (item: string, index: number) =>\n          category !== item && (\n            <button key={index} onClick={() => onClick(item)}>\n              {item}\n            </button>\n          )\n      )}\n    </List>\n  );\n}\n\nexport default CreatedList;\n","import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { categoryNow, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\nconst Title = styled.h1`\n  font-size: 22px;\n  font-weight: 600;\n  padding: 26px 0;\n  text-align: center;\n`;\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  padding: 0 16px;\n`;\nconst ErrorMeg = styled.h3`\n  font-size: 14px;\n  color: crimson;\n  padding: 14px;\n  font-weight: 400;\n  text-align: center;\n`;\nconst InputBox = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  justify-content: space-between;\n  position: relative;\n`;\nconst Input = styled.input`\n  width: 100%;\n  height: 60px;\n  padding-left: 26px;\n  padding-right: 150px;\n  font-size: 18px;\n  border-radius: 16px;\n  border: none;\n  background-color: ${(props) => props.theme.bgColor};\n  &::placeholder {\n    transition: 0.2s;\n  }\n  &:focus {\n    outline: none;\n    &::placeholder {\n      opacity: 0;\n    }\n  }\n`;\nconst AddBtn = styled.button`\n  position: absolute;\n  right: 10px;\n  align-self: center;\n  padding: 10px 30px;\n  background-color: crimson;\n  color: snow;\n  border-radius: 16px;\n  border: none;\n  cursor: pointer;\n`;\n\nfunction CreateToDo() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const selectedCategory = useRecoilValue(categoryNow);\n  const { register, handleSubmit, formState, setValue } = useForm<IForm>();\n  const onValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category: selectedCategory },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  useEffect(() => {\n    localStorage.setItem(\"toDos\", JSON.stringify(toDos));\n  }, [toDos]);\n  return (\n    <>\n      <Title>React To Do App</Title>\n      <Form onSubmit={handleSubmit(onValid)}>\n        <ErrorMeg>{formState.errors.toDo?.message}</ErrorMeg>\n        <InputBox>\n          <Input\n            {...register(\"toDo\", { required: \"할 일을 입력해주세요\" })}\n            autoFocus\n            autoComplete=\"off\"\n            type=\"text\"\n            placeholder=\"Write To-do...\"\n          />\n          <AddBtn>ADD</AddBtn>\n        </InputBox>\n      </Form>\n    </>\n  );\n}\n\nexport default CreateToDo;\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { categoryNow, everyCategories } from \"../atoms\";\n\nconst Container = styled.div`\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n  left: 0;\n  top: 0;\n  background-color: rgba(0, 0, 0, 0.3);\n  z-index: 100;\n`;\n\nconst Box = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n  width: 500px;\n  height: 300px;\n  background-color: #fff;\n  border-radius: 20px;\n  z-index: 200;\n  h2 {\n    font-size: 22px;\n    font-weight: bold;\n  }\n  .close-btn {\n    padding: 4px 12px;\n    background-color: #fff;\n    border: solid 2px #ccc;\n    border-radius: 8px;\n    color: #555;\n    cursor: pointer;\n  }\n`;\n\nconst Form = styled.form`\n  display: flex;\n  gap: 12px;\n  input {\n    width: 300px;\n    padding: 12px 20px;\n    border-radius: 12px;\n    border: none;\n    outline: none;\n    filter: drop-shadow(0 0 5px rgba(0, 0, 0, 0.3));\n  }\n  button {\n    padding: 0 12px;\n    background-color: crimson;\n    color: #fff;\n    border: none;\n    border-radius: 8px;\n  }\n`;\n\nconst Overlay = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 100%;\n`;\n\ninterface iAddCategory {\n  setShowAddCat: Function;\n}\n\ninterface iForm {\n  addCat: string;\n}\n\nfunction AddCategory({ setShowAddCat }: iAddCategory) {\n  const { register, handleSubmit } = useForm<iForm>();\n  const [allCats, setAllCats] = useRecoilState(everyCategories);\n  const setCategory = useSetRecoilState(categoryNow);\n  const onValid = ({ addCat }: iForm) => {\n    setShowAddCat(false);\n    setAllCats(() => [...allCats, addCat]);\n    localStorage.setItem(\"categories\", JSON.stringify([...allCats, addCat]));\n    setCategory(addCat);\n    localStorage.setItem(\"categoryNow\", JSON.stringify(addCat));\n  };\n  console.log(allCats);\n  return (\n    <Container>\n      <Box>\n        <h2>Add custom category</h2>\n        <Form onSubmit={handleSubmit(onValid)}>\n          <input\n            {...register(\"addCat\", {\n              required: \"사용자 지정 카테고리를 입력하세요\",\n            })}\n            placeholder=\"Write custom category\"\n            autoFocus\n            autoComplete=\"off\"\n            type=\"text\"\n          />\n          <button type=\"submit\">Add</button>\n        </Form>\n        <button\n          type=\"button\"\n          className=\"close-btn\"\n          onClick={() => setShowAddCat(false)}\n        >\n          Close\n        </button>\n      </Box>\n      <Overlay />\n    </Container>\n  );\n}\n\nexport default AddCategory;\n","import React, { useState } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport styled from \"styled-components\";\nimport { categoryNow, everyCategories, toDoSelector } from \"../atoms\";\nimport CreatedList from \"./CreatedList\";\nimport CreateToDo from \"./CreateToDo\";\nimport { BiCaretDown } from \"react-icons/bi\";\nimport AddCategory from \"./AddCategory\";\n\nconst Container = styled.section`\n  max-width: 600px;\n  margin: 0 auto;\n  border-radius: 20px;\n  padding: 30px 16px;\n  background-color: #fff;\n`;\n\nconst Lists = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n  gap: 12px;\n  h2 {\n    font-weight: 600;\n    padding-bottom: 10px;\n  }\n`;\n\nconst SelectBox = styled.div`\n  display: flex;\n  position: relative;\n  gap: 20px;\n  select {\n    width: 100%;\n    border: solid 2px #444;\n    padding: 12px 22px;\n    border-radius: 20px;\n    appearance: none;\n    outline: none;\n  }\n  .select-indicator {\n    position: absolute;\n    right: 18px;\n    top: 13px;\n  }\n`;\n\nconst AddCat = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: fit-content;\n  background-color: #444;\n  color: #fff;\n  border-radius: 8px;\n  font-size: 10px;\n  padding: 12px;\n  text-align: center;\n  cursor: pointer;\n  margin: 0 auto;\n  margin-bottom: 20px;\n`;\n\nfunction ToDoApp() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryNow);\n  const allCats = useRecoilValue(everyCategories);\n  const [showAddCat, setShowAddCat] = useState(false);\n\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as string);\n    localStorage.setItem(\n      \"categoryNow\",\n      JSON.stringify(event.currentTarget.value)\n    );\n  };\n  return (\n    <>\n      {showAddCat ? <AddCategory setShowAddCat={setShowAddCat} /> : null}\n      <Container>\n        <CreateToDo />\n        <Lists>\n          <SelectBox>\n            <select value={category} onInput={onInput}>\n              {allCats.map((item: string, index: number) => (\n                <option key={index} value={item}>\n                  {item}\n                </option>\n              ))}\n            </select>\n            <BiCaretDown className=\"select-indicator\" />\n          </SelectBox>\n          <AddCat onClick={() => setShowAddCat(true)}>\n            Add more categories\n          </AddCat>\n          {toDos.map((item) => (\n            <CreatedList key={item.id} {...item} />\n          ))}\n        </Lists>\n      </Container>\n    </>\n  );\n}\n\nexport default ToDoApp;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const lightTheme:DefaultTheme = {\n    bgColor: \"#dfe6e9\",\n    textColor: \"#2d3436\",\n    accentColor: \"#00cec9\",\n}\n\nexport const darkTheme:DefaultTheme = {\n    bgColor: \"#2d3436\",\n    textColor: \"#dfe6e9\",\n    accentColor: \"#00cec9\",\n}","import { useRecoilValue } from \"recoil\";\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport { theme } from \"./atoms\";\nimport ToDoApp from \"./components/ToDoContainer\";\nimport { darkTheme, lightTheme } from \"./theme\";\n\nconst GlobalStyle = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n  background-color: ${(props) => props.theme.bgColor};\n  font-family: 'Noto Sans KR', sans-serif;\n\tline-height: 1;\n\tpadding: 12px;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\na {\n  text-decoration: none;\n}\n`;\n\nfunction App() {\n  const isDark = useRecoilValue(theme);\n  return (\n    <>\n      <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <ToDoApp />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\nimport { Helmet } from \"react-helmet\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Helmet>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100;300;400;500;700;900&display=swap\"\n          rel=\"stylesheet\"\n        />\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdn.jsdelivr.net/npm/xeicon@2.3.3/xeicon.min.css\"\n        ></link>\n      </Helmet>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}